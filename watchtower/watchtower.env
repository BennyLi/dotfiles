# Complete list of arguments for Watchtower (date: 2022-07-07)
# see also: https://containrrr.dev/watchtower/arguments/

# Sets the time zone to be used by WatchTower's logs and the optional Cron scheduling argument (--schedule).
TZ={{ general_timezone }}


# Removes old images after updating.
WATCHTOWER_CLEANUP=false

# Removes attached volumes after updating.
WATCHTOWER_REMOVE_VOLUMES=false


# Enable debug mode with verbose logging.
WATCHTOWER_DEBUG=false

# Enable trace mode with very verbose logging. Caution: exposes credentials!
WATCHTOWER_TRACE=false

# Disable ANSI color escape codes in log output.
NO_COLOR=false


# Docker daemon socket to connect to. Can be pointed at a remote Docker host 
# by specifying a TCP endpoint as "tcp://hostname:port".
DOCKER_HOST="unix:///var/run/docker.sock"

# The API version to use by the Docker client for connecting to the Docker daemon.
DOCKER_API_VERSION=1.41


# Will also include restarting containers.
WATCHTOWER_INCLUDE_RESTARTING=false

# Will also include created and exited containers.
WATCHTOWER_INCLUDE_STOPPED=false

# Start any stopped containers that have had their image updated.
# This argument is only usable with the --include-stopped / WATCHTOWER_INCLUDE_STOPPED argument.
WATCHTOWER_REVIVE_STOPPED=false

# Poll interval (in seconds). This value controls how frequently watchtower will poll for new images.
# Either --schedule or a poll interval can be defined, but not both.
WATCHTOWER_POLL_INTERVAL=86400

# Update containers that have a com.centurylinklabs.watchtower.enable label set to true.
WATCHTOWER_LABEL_ENABLE=false

# Will only monitor for new images, send notifications and invoke the pre-check/post-check hooks, but will not update the containers.
WATCHTOWER_MONITOR_ONLY=true

# Do not restart containers after updating.
WATCHTOWER_NO_RESTART=false

# Do not pull new images. When this flag is specified, watchtower will not attempt to pull new images from the registry.
# Instead it will only monitor the local image cache for changes.
WATCHTOWER_NO_PULL=false

# Do not send a message after watchtower started. Otherwise there will be an info-level notification.
WATCHTOWER_NO_STARTUP_MESSAGE=false

# Run an update attempt against a container name list one time immediately and exit.
WATCHTOWER_RUN_ONCE=false


# Runs Watchtower in HTTP API mode, only allowing image updates to be triggered by an HTTP request.
WATCHTOWER_HTTP_API_UPDATE=false

# Sets an authentication token to HTTP API requests.
#WATCHTOWER_HTTP_API_TOKEN=""

# Keep running periodic updates if the HTTP API mode is enabled, otherwise the HTTP API would prevent periodic polls.
WATCHTOWER_HTTP_API_PERIODIC_POLLS=false


# Update containers that have a com.centurylinklabs.watchtower.scope label set with the same value as the given argument.
# This enables running multiple instances.
WATCHTOWER_SCOPE="{{ watchtower_scope }}"

# Enables a metrics endpoint, exposing prometheus metrics via HTTP.
WATCHTOWER_HTTP_API_METRICS=false

# Cron expression in 6 fields (rather than the traditional 5) which defines when and how often to check for new images.
# Either --interval or the schedule expression can be defined, but not both.
# An example: --schedule "0 0 4 * * *"
#WATCHTOWER_SCHEDULE=""

# Restart one image at time instead of stopping and starting all at once.
# Useful in conjunction with lifecycle hooks to implement zero-downtime deploy.
WATCHTOWER_ROLLING_RESTART=false

# Timeout before the container is forcefully stopped.
# When set, this option will change the default (10s) wait time to the given value.
WATCHTOWER_TIMEOUT="10s"

# Use TLS when connecting to the Docker socket and verify the server's certificate.
DOCKER_TLS_VERIFY=false

# When to warn about HEAD pull requests failing.
# Auto means that it will warn when the registry is known to handle the requests and may rate limit pull requests (mainly docker.io).
WATCHTOWER_WARN_ON_HEAD_FAILURE=auto


#
# Notifications
#  --> https://containrrr.dev/watchtower/notifications/

  # Controls the log level which is used for the notifications. If omitted, the default log level is info.
  # Possible values are: panic, fatal, error, warn, info, debug or trace.
  WATCHTOWER_NOTIFICATIONS_LEVEL="info"

  #
  # Email
  #
    #WATCHTOWER_NOTIFICATIONS=email
    #WATCHTOWER_NOTIFICATION_EMAIL_FROM="wt@example.com"
    #WATCHTOWER_NOTIFICATION_EMAIL_TO="notify.me@example.com"
    #WATCHTOWER_NOTIFICATION_EMAIL_SERVER="smpt.example.com"
    #WATCHTOWER_NOTIFICATION_EMAIL_SERVER_TLS_SKIP_VERIFY=false
    #WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=25
    #WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER="webmaster@example.com"
    #WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD="safe-mail-password"
    #WATCHTOWER_NOTIFICATION_EMAIL_DELAY="5" # seconds
    #WATCHTOWER_NOTIFICATION_EMAIL_SUBJECTTAG="[WATCHTOWER] "

  #
  # Slack
  #
    #WATCHTOWER_NOTIFICATIONS=slack
    #WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL="https://hooks.slack.com/services/xxx/yyyyyyyyyyyyyyy"
    #WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=watchtower-server-1
    #WATCHTOWER_NOTIFICATION_SLACK_CHANNEL=#my-custom-channel

  #
  # MS Teams
  #
    #WATCHTOWER_NOTIFICATIONS=msteams
    #WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL="https://outlook.office.com/webhook/xxxxxxxx@xxxxxxx/IncomingWebhook/yyyyyyyy/zzzzzzzzzz"
    #WATCHTOWER_NOTIFICATION_MSTEAMS_USE_LOG_DATA=true

  #
  # Gotify
  #
    WATCHTOWER_NOTIFICATIONS=gotify
    WATCHTOWER_NOTIFICATION_GOTIFY_URL="https://{{ gotify_domain }}/"
    WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN="{{ watchtower_gotify_application_token }}"
    WATCHTOWER_NOTIFICATION_GOTIFY_TLS_SKIP_VERIFY=false

  #
  # Shoutrrr
  #
    #WATCHTOWER_NOTIFICATIONS=shoutrrr
    #WATCHTOWER_NOTIFICATION_URL="discord://token@channel slack://watchtower@token-a/token-b/token-c"
    #WATCHTOWER_NOTIFICATION_TEMPLATE="{{range .}}{{.Time.Format \"2006-01-02 15:04:05\"}} ({{.Level}}): {{.Message}}{{println}}{{end}}"
